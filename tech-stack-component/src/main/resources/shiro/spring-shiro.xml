<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/aop   
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd"
	default-lazy-init="false">

	<description>Shiro安全配置</description>

	<!-- 項目自定义的Realm, shiroService需要具体项目去注入 -->
	<bean id="shiroDbRealm" class="com.techstack.component.shiro.ShiroDbRealm">
		<property name="shiroService" ref="shiroService" />
	</bean>

	<!-- 用户授权信息Cache, 采用内存去做缓存，Shiro 提供了类似于Spring的Cache抽象，即Shiro 本身不实现Cache，但是对Cache 
		进行 了又抽象，方便更换不同的底层Cache实现 -->
	<!-- <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"> 
		<property name="cacheManagerConfigFile" value="classpath:ehcache/ehcache-shiro.xml"/> 
	</bean> -->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />
	
	<!-- 基于Form表单的身份验证过滤器-->
	<!-- <bean id="formAuthenticationFilter"
		class="com.techstack.component.shiro.BaseFormAuthenticationFilter">
		<property name="usernameParam" value="username" />
		<property name="passwordParam" value="password" />
		<property name="loginUrl" value="/login_userLogin.action" />
	</bean> -->
	<bean id="formAuthenticationFilter" class="com.techstack.component.shiro.BaseFormAuthenticationFilter" />
	
	<!-- Shiro's main business-tier object for web-enabled applications -->
	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->  
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroDbRealm" />
		<property name="cacheManager" ref="shiroCacheManager" />
	</bean>
	
	<!-- Shiro Filter -->
	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->  
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->  
		<!-- <property name="loginUrl" value="/login_loginPage.action" />  --><!-- 拦截了post method的这个url请求，如果用户验证失败是放过这个url让其他filterq去处理，所以在controller中也可以写对应的action方法，处理用户验证失败后的逻辑，如返回错误信息回ui -->
		<property name="loginUrl" value="${shiro.loginUrl}" />
		<!-- 登录成功后要跳转的连接 -->  
		<!-- <property name="successUrl" value="/login_mainpage.action" /> -->
		<property name="successUrl" value="${shiro.successUrl}" />
		<!-- 没有权限跳转的url -->
		<!-- <property name="unauthorizedUrl" value="/login_loginPage.action" /> -->
		<property name="unauthorizedUrl" value="${shiro.unauthorizedUrl}" />
		<property name="filters">
			<map>
				<entry key="authc" value-ref="formAuthenticationFilter" />
			</map>
		</property>
		<!-- Shiro连接约束配置,即过滤链的定义 -->  
	    <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->  
	    <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
	    <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
	    <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
		<!-- http://m.blog.csdn.net/blog/yaowanpengLiferay/17281341 -->
		<property name="filterChainDefinitions" value="${shiro.filterChainDefinitions}" />
			<!-- <value>
				/mydemo/login=anon  
             	/mydemo/getVerifyCodeImage=anon  
             	/main**=authc  
             	/user/info*=authc  
             	/admin/listUser**=authc,perms[admin:manage]   
             	url模式使用Ant风格模式
				Ant路径通配符支持?、*、**，注意通配符匹配不包括目录分隔符“/”：
				?：匹配一个字符，如”/admin?”将匹配/admin1，但不匹配/admin 或/admin2；
				*：匹配零个或多个字符串，如/admin*将匹配/admin、/admin123，但不匹配/admin/1；
				**：匹配路径中的零个或多个路径，如/admin/**将匹配/admin/a或/admin/a/b。
				url 模式匹配顺序是按照在配置中的声明顺序匹配，即从头开始使用第一个匹配的url 模式对应的拦截器链
				
             	/js/** = anon 静态文件
             	/login_loginPage.action = authc
             	/login_logout.action = logout
             	/login_mainpage.action = user
             	/login_*.action = anon
             	/register_*.action = anon
             	/** = user 
             	/** = user 表示必须存在用户，当登入操作时不做检查
			</value>
		</property> -->
	</bean>
	
	<!-- AOP权限拦截，作用：允许AspecJ拦截Controller的method， 做权限的异常处理，因为shiro处理权限注解的时候，如果无权限只会抛异常 -->
	<!-- 这段配置必须放在开启Shiro aop方法级权限控制的配置前面，否则拦截器拦截的方法会失效.
		估计是多个拦截器对同一方法起效的时候，spring根据配置顺序进行拦截，
		被shiro的aop拦截器拦截后，因为没有权限直接抛异常，所以自定义的拦截器会失效 -->
	<!-- proxy-target-class默认"false",更改为"ture"使用CGLib动态代理 -->
	<!-- springmvc注解不起作用的原因是：打开aop功能的配置“<aop:aspectj-autoproxy proxy-target-class="true"/>”没有放在springmvc的servlet配置文件中，即放在扫描@Controller的那个配置文件中，配置在applicationContext.xml中是无效的。 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- <bean id="shiroPermissionInterceptor" class="com.techstack.component.shiro.ShiroPermissionInterceptor">
		<property name="unauthorizedUrl" value="login" />
	</bean>
	<aop:config>
		<aop:pointcut id="permissionActions" expression="execution(* com.techstack.pms.springmvc.web.*.*(..))" />
		<aop:advisor pointcut-ref="permissionActions" advice-ref="shiroPermissionInterceptor" />
	</aop:config> -->
	<!-- <aop:config>
		<aop:pointcut id="strutsActionsPms" expression="execution(* com.techstack.sms2.permission.action.*.*(..))" />
		<aop:advisor pointcut-ref="strutsActionsPms" advice-ref="permissionInterceptor" />
	</aop:config> -->

	<!-- Shiro 生命周期处理器, 保证实现了Shiro内部lifecycle函数的bean执行, 用于在实现了Initializable 接口的Shiro 
		bean 初始化时调用 Initializable 接口回调，在实现了Destroyable 接口的Shiro bean 销毁时调用Destroyable 
		接 口回调。如UserRealm就实现了Initializable，而DefaultSecurityManager实现了Destroyable。 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<!-- AOP式方法级权限检查, 支持 Shiro对Controller的方法级AOP安全控制  -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>
	
	

</beans>